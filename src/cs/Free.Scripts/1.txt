## BackgroundRemovalState [Type] 
background removal result

## Color [Type] 
32-bit ARGB unpremultiplied color value.

* Alpha - Gets the alpha component of the color.
* Red - Gets the red component of the color.
* Green - Gets the green component of the color.
* Blue - Gets the blue component of the color.

## ColorAsset [Type] 
Colors stored in the document (color picker > dropdown list (global) > document).

## ColorOverride [Type] 

* ColorId - Color Variable ID

## ColorSpace [Type] 
Document color space (color scheme the document uses).

## ColorVariable [Type] 
Color variables stored in the document.

* Id - Variable ID.
* Name - Variable name.
* Value - Color value of the variable.

## Component [Type] 
Components are reusable groups of layers.

* BackgroundInInstance - Include background in component instances.
* Predefined - Is this component from default Lunacy components library, that are available from Component Tools from Toolbar
* ComponentType - Reserved for future use. Will be used for components filters

## ComponentType [Type] 
Type of component. Not all values are used now. This is only for components filtering usage for now.

## CornerStyle [Type] 
Sketch legacy, not supported in Lunacy

## DataFieldType [Type] 
text generation type

## DataInfo [Type] 
text generation settings

* Format - String Format for Data Type. Used for Date/Time values.

## Document [Type] 
document.json structure

* Id - Unique document ID.
* FromFigma - The document is imported from Figma.
* Images - Images stored in the document.
* Colors - Colors stored in the document (color picker > dropdown list (global) > document).
* Gradients - Gradients stored in the document (color picker > dropdown list (global) > document).
* Fonts - Shared fonts stored in the document.
* ColorVariables - Color variables stored in the document.
* LayerStyles - Layer styles stored in the document.
* TextStyles - Text styles stored in the document.
* Pages - List of document pages.

## DocumentAssetBase [Type] 
??????????

## ExportFormat [Type] 
export setting

* Size - size with which the object is imported. used in ScaleType is Width or Height
* Format - export format, default is png
* Name - suffix/preffix (text), default is empty
* Naming - is suffix or preffix, default is suffix
* Scale - scale with which the object is imported. used when ScaleType is Scale
* Type - scale(px)/width/height, default is scale, right now we're only supporting the scale

## ExportOptions [Type] 

* Trim - trim empty pixels for exported image

## Fill [Type] 

* ColorId - Color Variable ID

## Font [Type] 
Shared fonts stored in the document. ??? embeded???

* Data - ?????????
* Name - Font name.
* FileName - Font file name.
* PostscriptNames - ??????

## ForeignColorVariable [Type] 
shared.json
            color variable from ui kit

* LibraryId - ui kit id
* LibraryName - ui kit name
* ComponentPrivate - This is sketch flag for private shared color variables.
* RemoteId - Id of color variable in shared library

## ForeignComponent [Type] 
shared.json
            component from ui kit

* LibraryId - ui kit id
* LibraryName - ui kit name
* ComponentPrivate - This is sketch flag for private shared components.
* Original - Original state of component on import
* Component - Current state of component

## ForeignSharedStyle [Type] 
shared.json
            shared style from ui kit

* LibraryId - ui kit id
* LibraryName - ui kit name
* ComponentPrivate - This is sketch flag for private shared styled.
* RemoteID - ID of Style in Remote Shared Library.

## Frame [Type] 
Frames are a special type of layer that serves as a container for other layers or layer groups. Frames are a must for prototypes.

* CornerRadius - Sets the corner radius of the frame.
* LayoutStrategy - Auto layout settings
* OverlayStyle - Style settings for frame if it's an overlay in sketch prototyping. Only for compatibility.
* ClipContent - When enabled, hides the content outside the frame boundaries.
* GroupLayout - Sketch Layout settings. Not supported in Lunacy. But keeping data for compatibility.
* BackgroundInExport - When enabled, the frame background is included into export files.
* FlowHome - Sets the frame as a prototype starting point.
* Viewport - if frame has type "resized" (what is displayed in the prototype)
* OverlayInteraction - Overlay Interaction for Sketch Prototyping
* Overlay - Is Current frame an overlay in prototyping
* ResizesContent - Enables adjusting and resizing the frame content as the framed is resized.
* Background - Defines the frame background color.
* BackgroundId - Color Variable ID
* OverlaySettings - Sketch Prototyping Overlay Feature settings.

## Gradient [Type] 
An object that represent a Gradient.

* Type - The type of the Gradient.
* From - The position of the start of the Gradient.
* To - The position of the end of the Gradient.
* Side - The position of the side point of the Gradient. Used for Radial and Angular Gragients
* Stops - The different stops of the Gradient.

## GradientAsset [Type] 
Gradients stored in the document (color picker > dropdown list (global) > document).

* Value - Values of gradients.

## GradientStop [Type] 
A position color pair representing a gradient stop.

* Pos - Value between 0 and 1 representing position along gradient axis.
* Color - Color attached to corresponding position.

## Group [Type] 
A layer group is two and more layers unified into a single entity that can be manipulated, organized, and treated as a single layer.

* SkipSelect - When enabled, users can select group items without first selecting the group.
* SkipConstraints - This is for constraints compatibility with sketch. If file is imported from sketch format it should be false to handle constraints properly.
* GroupLayout - Sketch Group Layout. We don't support it but keep it for compatibility
* Layers - List of layers within the group.

## Hotspot [Type] 
Hotspots are a special type of layers that define clickable areas on prototypes.

## InlineStyle [Type] 
Style of text part

* Start - selection start position
* Length - length of selection
* Style - Selection style

## Instance [Type] 

* CornerRadius - Sets the corner radius of the instance frame.
* Scale - scale of component
* Overrides - Defines the overrides applied to the instance.

## Layer [Type] 

* Expand - Is expanded in layers tree
* Constraints - Possible Flag's values: LEFT, TOP, RIGHT, BOTTOM, FIXW, FIXH, ALL
* Mask - masking object
* BreakMask - ignore clipping mask
* KeepScroll - fix position (prototyping)
* Link - target when clicking on the object (in prototype player)

## Meta [Type] 
Contains metadata about the document

* Version - Free Format Version
* App - App Name
* Variant - App Variant - (beta/standalone/store/web/etc.)
* AppVersion - App Version
* By - Saved by who ? email address

## Page [Type] 
Document page properties.

* Id - Unique page ID.
* Name - Page name.
* Background - Canvas color.
* IsComponentPage - If the page is used to store components.
* Rulers - Rulers applied by the user.
* Origin - Point where the user left off the page.
* Zoom - Zoom scale last applied to the page.
* Layers - List of layers in the page.

## Pattern [Type] 

* Rotation - For all fill types except crop
* TileScale - Used only for Tile
* Transform - Only used in Crop pattern fill type

## Polygon [Type] 

* Rays - Number of corners

## Rulers [Type] 
Object containing rulers origin and guidelines positions

* Origin - Origin for Rulers. Not supported in Lunacy. Sketch Compatibility
* Guides - Vertical guidelines positions on Horizontal Ruler
* VGuides - Horizontal guidelines positions on Vertical Ruler

## ShadowEffect [Type] 

* ColorId - Color Variable ID

## Shape [Type] 

* SkipConstraints - This is for constraints compatibility with sketch. If file is imported from sketch format it should be false to handle constraints properly.
* GroupLayout - Sketch Group Layout. We don't support it but keep it for compatibility

## SharedStyle [Type] 
Style saved in the document.

* Id - Unique style ID.
* Name - Style name.
* Style - Layer style settings.
* TextStyle - Text style settings.

## Slice [Type] 

* BackgroundId - Color Variable ID

## Star [Type] 

* Rays - number of rays in star

## Text [Type] 

* ClipContent - after import from figma

## TextColorOverride [Type] 

* ColorId - Color Variable ID

## TextStyle [Type] 

* ColorId - Color Variable ID
* Variation - Variable Fonts settings. Not supported in Lunacy yet.

## BaselinePosition [Enum] 

* Superscript - small letter on top, like a^2
* Subscript - small letter on bottom

## BoolOp [Enum] 
The type of operation used to combine the children of this node.

* None - Not set. Works like Difference or like Union depends on context
* Union - Combine
* Subtract - Subtract one from another
* Intersect - Get shapes intersection
* Difference - Draw shapes difference

## GradientType [Enum] 
Enumeration of the type of a Gradient.

* Linear - Linear gradients tend to be the most common, where two colors will appear at opposite points of an object and will blend, or transition into each other.
* Radial - A radial gradient will create an effect where the transition between color stops will be in a circular pattern.
* Angular - This effect allows you to create gradients that sweep around the circumference (measured by the maximum width or height of a layer) in a clockwise direction.

## LineCap [Enum] 
Enumeration of the positions of a border.

* Butt - This is the default option thatâ€™ll draw the border right to the vector point.
* Round - Creates a rounded, semi-circular end to a path that extends past the vector point.
* Square - Similar to the rounded cap, but with a straight edges.

## Matrix [Enum] 
A transformation matrix is standard way in computer graphics to represent translation and rotation.
            These are the top two rows of a 3x3 matrix. The bottom row of the matrix is assumed to be [0, 0, 1].
            This is known as an affine transform and is enough to represent translation, rotation, and skew.
            The identity transform is [1, 0, 0,   0, 1, 0].
            A translation matrix will typically look like: [1, 0, tx,   0, 1, ty]
            and a rotation matrix will typically look like: [cos(angle), -sin(angle), 0,   sin(angle), cos(angle), 0]
            If Matrix contains only translation it will be printed like point [0,5]

* ScaleX - Scale by x-coord. Usually should be 1.
            If it's -1 - layer is flipped horizontally.
            If it's some random number - it's a cos(angle).
* SkewX - Skew by x-coord. Usually should be 0.
            If it's some random number - it's a -sin(angle).
* TransX - Translation by x-coord.
* SkewY - Skew by y-coord. Usually should be 0.
            If it's some random number - it's a sin(angle).
* ScaleY - Scale by y-coord. Usually should be 1.
            If it's -1 - layer is flipped vertically.
            If it's some random number - it's a cos(angle).
* TransY - Translation by y-coord.

## NamingScheme [Enum] 
scheme for names of imported objects (suffix/preffix)

* SecondaryPrefix - we use secondary and primary prefix as a prefix

## PathFillType [Enum] 

* Winding - Specifies that "inside" is computed by a non-zero sum of signed edge crossings.
* EvenOdd - Specifies that "inside" is computed by an odd number of edge crossings.

## Point [Enum] 
A utility class to represent a point.

* X - The x coordinate of the point.
* Y - The y coordinate of the point.

## Rect [Enum] 
A utility class to represent a rectangle. Contains some methods to make interacting with a rectangle easier.

* Left - A utility class to represent a rectangle. Contains some methods to make interacting with a rectangle easier.
* Top - The x coordinate of the top-left corner of the rectangle. Or an object with
* Width - The width of the rectangle.
* Height - The height of the rectangle.

## TextBehavior [Enum] 
Enumeration of the behaviours for text layers

* AutoHeight - The width of the textbox is fixed. Characters wrap to fit in the textbox. The height of the textbox automatically adjusts to fit its content.
* Fixed - The size of the textbox is fixed and is independent of its content.

## Vertex [Enum] 
!most critical moment in wiki doc. [x,y,flags,radius,fromX,fromY,toX,toY]

* Point - Base Point of a Vertex
* From - First Control Point, Curve From
* To - Second Control Point, Curve To
* Radius - Corner Radius of a vertex point. It's stored in half because we don't need that much precision for corner radius
* Flags - Vertex flags, contains: CurveMode, hasFrom, hasTo and CornerStyle

