# Free Format Specification

## Base Types

Free format is NULL-free, NaN-free and Infinity-free - if any of this values are in JSON - it's broken. 

* float - 32bit single-precision floating-point number
* int - 32bit signed integer
* byte - 8-bit unsigned integer
* bool - Boolean (true or false) value
* string - text as a sequence of UTF-8 code units
* GUID - globally unique identifier, with base64 encryption, length is always 22 chars. 

## Layers

### Object Component — A component is a reusable groups of layers.

Has all properties of `Frame`, plus:
* string _t = "COMPONENT"
* GUID ComponentId
* bool Predefined = false
* string FigmaId
* ComponentPropertyBase[] Properties

### Object Oval — An oval is a shape drawn on the canvas with the Oval tool.

Has all properties of `Path`, plus:
* string _t = "OVAL"
* float Angle = 0
* float Ratio = 0
* float StartAngle = 0

### Object Polygon — A polygon is a shape drawn on the canvas with the Polygon tool.

Has all properties of `Path`, plus:
* string _t = "POLYGON"
* float Rays = 0

### Object Rectangle — A rectangle is a shape drawn on the canvas with the Rectangle tool.

Has all properties of `Path`, plus:
* string _t = "RECT"
* bool SmoothCorners = false

### Object Star — A star is a shape drawn on the canvas with the Star tool.

Has all properties of `Path`, plus:
* string _t = "STAR"
* float Rays = 0
* float Ratio = 0

### Object States — Set of a states of the component.

Has all properties of `Frame`, plus:
* string _t = "STATES"
* ComponentPropertyBase[] Properties

### Object Triangle — A triangle is a shape drawn on the canvas with the Triangle tool.

Has all properties of `Path`, plus:
* string _t = "TRIANGLE"

### Object Frame — A frame is a special type of layers that serves as a container for other layers or layer groups. Frames are a must for prototypes.

Has all properties of `Layer`, plus:
* string _t = "FRAME"
* bool ClipContent = false
* bool FlowHome = false
* PrototypeViewport Viewport
* bool ResizesContent = false
* AutoLayoutContainer Container
* LayoutGuideBase[] Layouts
* GUID GridsId
* Rulers Rulers
* Layer[] Layers

### Object Group — A layer group is two or more layers unified into a single entity that can be manipulated, organized, and treated as a single layer.

Has all properties of `Layer`, plus:
* string _t = "GROUP"
* bool SkipSelect = false
* Layer[] Layers

### Object Instance — An instance is a copy of the main component. With instances, you can reuse the same design element in multiple places in your project while retaining a connection to the main component.

Has all properties of `Layer`, plus:
* string _t = "INSTANCE"
* float Scale = 0
* GUID ComponentId
* AutoLayoutContainer Container
* Override[] Overrides

### Object Path — A vector path determines the outline and form of a vector object. A path is made up of points and segments.

Has all properties of `Layer`, plus:
* string _t = "PATH"
* Arrowhead StartMarker = 0
* Arrowhead EndMarker = 0
* float MiterLimit = 10
* bool Edited = false
* bool Open = false
* Vertex[] Points

### Object Section — Root group of layers. Can be a child of a page or another section.             Does not support rotation, flips, effects.

Has all properties of `Layer`, plus:
* string _t = "SECTION"
* Layer[] Layers

### Object Shape — A shape is a rectangle, oval, polygon, triangle, or star drawn with the respective shape tool. You can draw a triangle, rectangle, etc. with the Pen tool, but they won't be treated as shapes.

Has all properties of `Layer`, plus:
* string _t = "SHAPE"
* Arrowhead StartMarker = 0
* Arrowhead EndMarker = 0
* float MiterLimit = 10
* Layer[] Layers

### Object Slice — A slice is a special type of layers used for exporting certaing parts of designs.

Has all properties of `Layer`, plus:
* string _t = "SLICE"
* bool HasBackground = false
* Color Background = "00000000"
* GUID? BackgroundId

### Object Text — Text is a block or line of text on the canvas.

Has all properties of `Layer`, plus:
* string _t = "TEXT"
* string text
* TextProperties TextStyle
* InlineStyle[] Inlines
* TextBehavior Behavior = 0
* bool ClipContent = true
* bool Truncate = false
* byte MaxLines = 0
* bool DrawOnPath = false
* bool Warp = false
* GUID TextStyleId

### Object Layer — A layer is any ungrouped element available on the canvas.

* string _t = "COMPONENT"
* GUID Id
* string Name
* bool NameIsFixed = false
* BoolOp BooleanOp = 0
* bool Fixed = false
* bool Locked = false
* bool Hidden = false
* bool IsTemplate = false
* bool Expand = false
* bool Trim = false
* ExportOption[] Export
* string Constraints = "LTWH"
* Matrix Transform = Free.Schema.Matrix
* Size Size = [100,100]
* bool LockAspect = false
* bool Mask = false
* bool BreakMask = false
* MaskType MaskType = 0
* bool KeepScroll = false
* float MinWidth = 0
* float MinHeight = 0
* float MaxWidth = 0
* float MaxHeight = 0
* bool LayoutStretch = false
* bool LayoutGrowStretch = false
* bool LayoutFixPos = false
* [string,string] Custom
* GUID FillsId
* GUID BordersId
* GUID EffectsId
* float Opacity = 1
* BlendMode BlendMode = 0
* PathFillType Winding = 1
* Fill[] Fills
* Fill[] Borders
* float Thickness = 0
* Thickness CustomThickness = [0,0,0,0]
* LinePosition LinePos = 0
* LineCap LineCap = 0
* LineJoin LineJoin = 0
* float[] Dash
* ShadowEffect[] Shadows
* ShadowEffect[] InnerShadows
* BlurEffect Blur
* ImageFilters ImageFilters
* float[] CornerRadius = float[4]
* bool SmoothCorners = false

### Object ColorStyle — Style of fills. Can be set to borders and fills.

Has all properties of `StyleBase`, plus:
* Fill[] Fills

### Object EffectStyle

Has all properties of `StyleBase`, plus:
* ShadowEffect[] Shadows
* ShadowEffect[] InnerShadows
* BlurEffect Blur

### Object TextStyle — Text Style

Has all properties of `StyleBase`, plus:
* string Font = "Inter"
* float Size = 12
* float ParagraphSpacing = 0
* float Kerning = 0
* float BaselineOffset = 0
* float? LineHeight
* bool Underline = false
* bool Strikethrough = false
* CharacterCasing Casing = 0

### Object StyleBase — Base class for a shared style

* GUID Id
* string Name
* int Version = 0
* string FigmaId

### Object AutoLayoutContainer — Defines auto layout settings.

Has all properties of `LayoutContainerBase`, plus:
* string _t = "AUTO"
* LayoutOrientation Orientation = 0
* float Spacing = 0
* float WrapSpacing = 0
* Thickness Padding = [0,0,0,0]
* HorizontalAlignment Align = 0
* VerticalAlignment Valign = 0
* SizingMode Sizing = 0
* SizingMode Vsizing = 0
* bool TextBaseline = false
* bool StrokesIncluded = false
* bool ReverseZIndex = false
* bool Wrap = false
* bool WrapDistribute = false

### Object BlurEffect — Defines the settings of the blur effect.

* float Saturation = 1
* float Radius = 10
* bool Enabled = false
* BlurType Type = 0

### Object ExportOption — Export settings.

* string Format = "PNG"
* ScaleType Type = 0
* float Size = 0
* string Name
* NamingScheme Naming = 0

### Object Fill — Defines the fill applied to a layer.

* bool Enabled = false
* Color Color = "00000000"
* GUID? ColorId
* FillType Type = 0
* float Opacity = 0
* BlendMode BlendMode = 0
* Pattern Pattern
* Gradient Gradient

### Object Font — Embedded fonts stored in the document.

* string Data
* string Name
* string FileName
* string[] PostscriptNames

### Object Gradient — An object that represents a gradient.

* GradientType Type = 0
* Point From = [0.5,0]
* Point To = [0.5,1]
* Point Side = [0,0]
* GradientStop[] Stops

### Object GradientStop — A position-color pair representing a gradient stop.

* float Pos = 0
* Color Color = "00000000"
* GUID? ColorId

### Object ImageFilters — Defines filters that can be applied to images.

* bool Enabled = false
* float Brightness = 0
* float Contrast = 1
* float Hue = 0
* float Saturation = 1

### Object InlineStyle — Style (bold, italic, etc.) applied to a part of text or single word within a text block.

* int Start = 0
* int Length = 0
* TextProperties Style
* GUID FillsId
* GUID TextStyleId

### Object LayoutContainerBase — Defines a container layout.

* string _t

### Object Page — Document page properties.

* GUID Id
* string Name
* Color Background = "00000000"
* bool IsComponentPage = false
* Rulers Rulers
* Point Origin = [0,0]
* float Zoom = 0
* Layer[] Layers

### Object Pattern — Defines the image fill options.

* PatternFillType Type = 1
* string Image
* float Rotation = 0
* float TileScale = 1
* Matrix? Transform

### Object PrototypeViewport — This is a frame preset. Also used to determine viewport size for a large frame to scroll it properly.

* GUID Id
* string Name
* Size Size = [0,0]
* GUID LibraryId

### Object Rulers — An object containing ruler origins and guideline positions.

* int[] Guides
* int[] VGuides

### Object ShadowEffect — Defines the shadow options.

* bool Enabled = true
* float Radius = 0
* Color Color = "00000000"
* GUID? ColorId
* float Spread = 0
* Point Offset = [0,0]
* BlendMode BlendMode = 0

### Object TextProperties — Defines a set of properties that make up a text style.

* Fill[] Fills
* string Font = "Inter"
* float Size = 12
* float ParagraphSpacing = 0
* float Kerning = 0
* float BaselineOffset = 0
* float? LineHeight
* CharacterCasing Casing = 0
* TextHorizontalAlignment Align = 0
* TextVerticalAlignment Valign = 0
* ListMarkerType List = 0
* bool RTL = false
* bool Underline = false
* bool Strikethrough = false
* BaselinePosition BaselinePos = 0

### Struct Color — 32-bit ARGB unpremultiplied color value.

* byte Alpha = 0
* byte Red = 0
* byte Green = 0
* byte Blue = 0

### Struct Matrix — A transformation matrix is standard way in computer graphics to represent translation and rotation.             These are the top two rows of a 3x3 matrix. The bottom row of the matrix is assumed to be [0, 0, 1].             This is known as an affine transform and is enough to represent translation, rotation, and skew.             The identity transform is [1, 0, 0,   0, 1, 0].             A translation matrix will typically look like: [1, 0, tx,   0, 1, ty]             and a rotation matrix will typically look like: [cos(angle), -sin(angle), 0, sin(angle), cos(angle), 0]             If a matrix contains only translation it will be printed like point [0,5]

* float ScaleX
* float SkewX
* float TransX
* float SkewY
* float ScaleY
* float TransY

### Struct Point — A utility class to represent a point.

* float X
* float Y

### Struct Rect — A utility class to represent a rectangle.

* float Left
* float Top
* float Width
* float Height

### Struct Size — A utility class to represent layer size.

* float Width
* float Height

### Struct Thickness — Thickness struct. Used for Border thickness and Padding values

* float Left
* float Top
* float Right
* float Bottom

### Struct Vertex — A utility class to represent a vertex.

* Point Point = [0,0]
* Point From = [0,0]
* Point To = [0,0]
* float Radius
* CurveMode Mode = 0

### Enum Arrowhead — Defines the appearance of arrowheads.

* 0 None
* 1 Arrow
* 2 ArrowFilled
* 3 Line
* 4 Circle
* 5 CircleFilled
* 6 Square
* 7 SquareFilled

### Enum BaselinePosition — Defines text position against the baseline.

* 0 Normal
* 1 Superscript
* -1 Subscript

### Enum BlendMode — Defines the type of blend mode applied to a layer.

* 0 Normal
* 1 Darken
* 2 Multiply
* 3 ColorBurn
* 4 Lighten
* 5 Screen
* 6 ColorDodge
* 7 Overlay
* 8 SoftLight
* 9 HardLight
* 10 Difference
* 11 Exclusion
* 12 Hue
* 13 Saturation
* 14 Color
* 15 Luminosity
* 16 PlusDarker
* 17 PlusLighter

### Enum BlurType — Defines the blur type.

* 0 Gaussian
* 3 Background

### Enum BoolOp — Types of boolean operations used to combine shapes.

* -1 None
* 0 Union
* 1 Subtract
* 2 Intersect
* 3 Difference

### Enum CharacterCasing — Defines letter case.

* 0 Normal
* 1 UpperCase
* 2 LowerCase
* 3 TitleCase

### Enum CurveMode — Defines the types of points on Bézier curves.

* 0 None
* 1 Straight
* 2 Mirrored
* 3 Asymmetric
* 4 Disconnected
* 4 OnlyFrom
* 5 OnlyTo

### Enum FillType — Defines the fill type.

* 0 Color
* 1 Gradient
* 4 Pattern

### Enum GradientType — List of Gradient types.

* 0 Linear
* 1 Radial
* 2 Angular

### Enum HorizontalAlignment — Defines how a set of layers is aligned horizontally.

* 0 Left
* 1 Center
* 2 Right
* 3 Distribute

### Enum LayoutHorizontalAlignment — Defines horizontal alignment settings in layout guide.

* 0 Left
* 1 Center
* 2 Right
* 3 Stretch

### Enum LayoutOrientation — Orientation of an auto layout.

* 0 Horizontal
* 1 Vertical

### Enum LayoutVerticalAlignment — Defines vertical alignment settings in layout guides.

* 0 Top
* 1 Middle
* 2 Bottom
* 3 Stretch

### Enum LineCap — Defines the shape of the end caps of open paths drawn with the Line, Arrow, or Pen/Pencil tools.

* 0 Butt
* 1 Round
* 2 Square

### Enum LineJoin — Defines the appearance of the corners for arrows and paths with corners drawn with the Pen/Pencil tool.

* 0 Miter
* 1 Round
* 2 Bevel

### Enum LinePosition — Defines the border position.

* 0 Center
* 1 Inside
* 2 Outside

### Enum ListMarkerType — Defines the type of a text list.

* 0 None
* 1 Bullet
* 2 Numbered

### Enum MaskType — Type of a mask.

* 0 Vector
* 1 Alpha
* 2 Luminance

### Enum PathFillType — Defines the filling options for overlapping paths.

* 0 Winding
* 1 EvenOdd

### Enum PatternFillType — Defines the image fill type.

* 0 Tile
* 1 Fill
* 2 Stretch
* 3 Fit
* 4 Crop

### Enum ScaleType — Defines the scale type for exported objects.

* 0 Scale
* 1 Width
* 2 Height

### Enum SizingMode — Defines the behavior of auto layout containers as their content is changed.

* 0 Auto
* 1 Fixed

### Enum TextBehavior — Defines textbox behavior options.

* 1 AutoHeight
* 2 Fixed
* 0 Flexible

### Enum TextHorizontalAlignment — Defines how a text is aligned horizontally.

* 0 Left
* 1 Right
* 2 Center
* 3 Justify

### Enum TextVerticalAlignment — Defines how a text is aligned vertically.

* 0 Top
* 1 Middle
* 2 Bottom

### Enum VerticalAlignment — Defines how a set of layers is aligned vertically.

* 0 Top
* 1 Center
* 2 Bottom
* 3 Distribute

