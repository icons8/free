# Free Format Specification

## Base Types

Free format is NULL-free, NaN-free and Infinity-free - if any of this values are in JSON - it's broken. 

* float - 32bit single-precision floating-point number
* int - 32bit signed integer
* byte - 8-bit unsigned integer
* bool - Boolean (true or false) value
* string - text as a sequence of UTF-8 code units
* GUID - globally unique identifier, with base64 encryption, length is always 22 chars. 

## Layers

### Object Component — A component is a reusable groups of layers.

Has all properties of `Frame`, plus:
* string _t = "COMPONENT"
* GUID componentId
* bool predefined = false
* string figmaId
* ComponentPropertyBase[] properties

### Object Line — A line is a shape drawn on the canvas with the Line tool.

Has all properties of `Path`, plus:
* string _t = "LINE"

### Object Oval — An oval is a shape drawn on the canvas with the Oval tool.

Has all properties of `Path`, plus:
* string _t = "OVAL"
* float angle = 0
* float ratio = 0
* float startAngle = 0

### Object Polygon — A polygon is a shape drawn on the canvas with the Polygon tool.

Has all properties of `Path`, plus:
* string _t = "POLYGON"
* float rays = 0

### Object Rectangle — A rectangle is a shape drawn on the canvas with the Rectangle tool.

Has all properties of `Path`, plus:
* string _t = "RECT"
* bool smoothCorners = false

### Object Star — A star is a shape drawn on the canvas with the Star tool.

Has all properties of `Path`, plus:
* string _t = "STAR"
* float rays = 0
* float ratio = 0

### Object States — Set of a states of the component.

Has all properties of `Frame`, plus:
* string _t = "STATES"
* ComponentPropertyBase[] properties

### Object Triangle — A triangle is a shape drawn on the canvas with the Triangle tool.

Has all properties of `Path`, plus:
* string _t = "TRIANGLE"

### Object Frame — A frame is a special type of layers that serves as a container for other layers or layer groups. Frames are a must for prototypes.

Has all properties of `Layer`, plus:
* string _t = "FRAME"
* bool clipContent = false
* bool flowHome = false
* PrototypeViewport viewport
* bool resizesContent = false
* AutoLayoutContainer container
* LayoutGuideBase[] layouts
* GUID gridsId
* Rulers rulers
* Layer[] layers

### Object Group — A layer group is two or more layers unified into a single entity that can be manipulated, organized, and treated as a single layer.

Has all properties of `Layer`, plus:
* string _t = "GROUP"
* bool skipSelect = false
* Layer[] layers

### Object Instance — An instance is a copy of the main component. With instances, you can reuse the same design element in multiple places in your project while retaining a connection to the main component.

Has all properties of `Layer`, plus:
* string _t = "INSTANCE"
* float scale = 0
* GUID componentId
* AutoLayoutContainer container
* Override[] overrides

### Object Path — A vector path determines the outline and form of a vector object. A path is made up of points and segments.

Has all properties of `Layer`, plus:
* string _t = "PATH"
* Arrowhead startMarker = 0
* Arrowhead endMarker = 0
* float miterLimit = 10
* bool edited = false
* bool open = false
* Vertex[] points
* string pathData

### Object Section — Root group of layers. Can be a child of a page or another section. Does not support rotation, flips, effects.

Has all properties of `Layer`, plus:
* string _t = "SECTION"
* Layer[] layers

### Object Shape — A shape is a rectangle, oval, polygon, triangle, or star drawn with the respective shape tool. You can draw a triangle, rectangle, etc. with the Pen tool, but they won't be treated as shapes.

Has all properties of `Layer`, plus:
* string _t = "SHAPE"
* Arrowhead startMarker = 0
* Arrowhead endMarker = 0
* float miterLimit = 10
* Layer[] layers

### Object Slice — A slice is a special type of layers used for exporting certaing parts of designs.

Has all properties of `Layer`, plus:
* string _t = "SLICE"
* bool hasBackground = false
* Color background = "00000000"
* GUID? backgroundId

### Object Text — Text is a block or line of text on the canvas.

Has all properties of `Layer`, plus:
* string _t = "TEXT"
* string text
* TextProperties textStyle
* InlineStyle[] inlines
* TextBehavior behavior = 0
* bool clipContent = true
* bool truncate = false
* byte maxLines = 0
* bool drawOnPath = false
* bool warp = false
* GUID textStyleId

### Object Layer — A layer is any ungrouped element available on the canvas.

* string _t = "COMPONENT"
* GUID id
* string name
* bool nameIsFixed = false
* BoolOp booleanOp = 0
* bool fixed = false
* bool locked = false
* bool hidden = false
* bool isTemplate = false
* bool expand = false
* bool trim = false
* ExportOption[] export
* string constraints = "LTWH"
* Matrix transform = Free.Schema.Matrix
* Size size = [100,100]
* bool lockAspect = false
* bool mask = false
* bool breakMask = false
* MaskType maskType = 0
* bool keepScroll = false
* float minWidth = 0
* float minHeight = 0
* float maxWidth = 0
* float maxHeight = 0
* bool layoutStretch = false
* bool layoutGrowStretch = false
* bool layoutFixPos = false
* [string,string] custom
* GUID fillsId
* GUID bordersId
* GUID effectsId
* float opacity = 1
* BlendMode blendMode = 0
* PathFillType winding = 1
* Fill[] fills
* Fill[] borders
* float thickness = 0
* Thickness customThickness = [0,0,0,0]
* LinePosition linePos = 0
* LineCap lineCap = 0
* LineJoin lineJoin = 0
* float[] dash
* ShadowEffect[] shadows
* ShadowEffect[] innerShadows
* BlurEffect blur
* ImageFilters imageFilters
* float[] cornerRadius = float[4]
* bool smoothCorners = false

### Object ColorStyle — Style of fills. Can be set to borders and fills.

Has all properties of `StyleBase`, plus:
* Fill[] fills

### Object EffectStyle

Has all properties of `StyleBase`, plus:
* ShadowEffect[] shadows
* ShadowEffect[] innerShadows
* BlurEffect blur

### Object TextStyle — Text Style

Has all properties of `StyleBase`, plus:
* string font = "Inter"
* float size = 12
* float paragraphSpacing = 0
* float kerning = 0
* float baselineOffset = 0
* float? lineHeight
* bool underline = false
* bool strikethrough = false
* CharacterCasing casing = 0

### Object StyleBase — Base class for a shared style

* GUID id
* string name
* int version = 0
* string figmaId

### Object AutoLayoutContainer — Defines auto layout settings.

Has all properties of `LayoutContainerBase`, plus:
* string _t = "AUTO"
* LayoutOrientation orientation = 0
* float spacing = 0
* float wrapSpacing = 0
* Thickness padding = [0,0,0,0]
* HorizontalAlignment align = 0
* VerticalAlignment valign = 0
* SizingMode sizing = 0
* SizingMode vsizing = 0
* bool textBaseline = false
* bool strokesIncluded = false
* bool reverseZIndex = false
* bool wrap = false
* bool wrapDistribute = false

### Object BlurEffect — Defines the settings of the blur effect.

* float saturation = 1
* float radius = 10
* bool enabled = false
* BlurType type = 0

### Object ExportOption — Export settings.

* string format = "PNG"
* ScaleType type = 0
* float size = 0
* string name
* NamingScheme naming = 0

### Object Fill — Defines the fill applied to a layer.

* bool enabled = false
* Color color = "00000000"
* GUID? colorId
* FillType type = 0
* float opacity = 0
* BlendMode blendMode = 0
* Pattern pattern
* Gradient gradient

### Object Font — Embedded fonts stored in the document.

* string data
* string name
* string fileName
* string[] postscriptNames

### Object Gradient — An object that represents a gradient.

* GradientType type = 0
* Point from = [0.5,0]
* Point to = [0.5,1]
* Point side = [0,0]
* GradientStop[] stops

### Object GradientStop — A position-color pair representing a gradient stop.

* float pos = 0
* Color color = "00000000"
* GUID? colorId

### Object ImageFilters — Defines filters that can be applied to images.

* bool enabled = false
* float brightness = 0
* float contrast = 1
* float hue = 0
* float saturation = 1

### Object InlineStyle — Style (bold, italic, etc.) applied to a part of text or single word within a text block.

* int start = 0
* int length = 0
* TextProperties style
* GUID fillsId
* GUID textStyleId

### Object LayoutContainerBase — Defines a container layout.

* string _t

### Object Page — Document page properties.

* GUID id
* string name
* Color background = "00000000"
* bool isComponentPage = false
* Rulers rulers
* StickyArrow[] stickyArrows
* Point origin = [0,0]
* float zoom = 0
* Layer[] layers

### Object Pattern — Defines the image fill options.

* PatternFillType type = 1
* string image
* float rotation = 0
* float tileScale = 1
* Matrix? transform

### Object PrototypeViewport — This is a frame preset. Also used to determine viewport size for a large frame to scroll it properly.

* GUID id
* string name
* Size size = [0,0]
* GUID libraryId

### Object Rulers — An object containing ruler origins and guideline positions.

* int[] guides
* int[] vGuides

### Object ShadowEffect — Defines the shadow options.

* bool enabled = true
* float radius = 0
* Color color = "00000000"
* GUID? colorId
* float spread = 0
* Point offset = [0,0]
* BlendMode blendMode = 0

### Object StickyArrow — Sticky Arrows are used for annotations. Stored on a page. Not a layer.

* GUID? startId
* GUID? endId
* Point startPos = [0,0]
* Point endPos = [0,0]
* Arrowhead startMarker = 0
* Arrowhead endMarker = 0
* LineCap lineCap = 0
* LineJoin lineJoin = 0
* float[] dash
* float thickness = 0
* Color color = "00000000"

### Object TextProperties — Defines a set of properties that make up a text style.

* Fill[] fills
* string font = "Inter"
* float size = 12
* float paragraphSpacing = 0
* float kerning = 0
* float baselineOffset = 0
* float? lineHeight
* CharacterCasing casing = 0
* TextHorizontalAlignment align = 0
* TextVerticalAlignment valign = 0
* ListMarkerType list = 0
* bool rTL = false
* bool underline = false
* bool strikethrough = false
* BaselinePosition baselinePos = 0

### Struct Color — 32-bit ARGB unpremultiplied color value.

* byte alpha = 0
* byte red = 0
* byte green = 0
* byte blue = 0

### Struct Matrix — A transformation matrix is standard way in computer graphics to represent translation and rotation. These are the top two rows of a 3x3 matrix. The bottom row of the matrix is assumed to be [0, 0, 1]. This is known as an affine transform and is enough to represent translation, rotation, and skew. The identity transform is [1, 0, 0,  0, 1, 0]. A translation matrix will typically look like: [1, 0, tx,  0, 1, ty] and a rotation matrix will typically look like: [cos(angle), -sin(angle), 0, sin(angle), cos(angle), 0] If a matrix contains only translation it will be printed like point [0,5]

* float scaleX
* float skewX
* float transX
* float skewY
* float scaleY
* float transY

### Struct Point — A utility class to represent a point.

* float x
* float y

### Struct Rect — A utility class to represent a rectangle.

* float left
* float top
* float width
* float height

### Struct Size — A utility class to represent layer size.

* float width
* float height

### Struct Thickness — Thickness struct. Used for Border thickness and Padding values

* float left
* float top
* float right
* float bottom

### Struct Vertex — The Vertex data type, which defines path points, and has several notation options. It's simply an array of numbers and can include up to eight values: ``[x, y, mode, radius, fromX, fromY, toX, toY]``. If the points on the right end of the array have default values, they are omitted. So, if toX, toY, fromX, fromY are all zeros, the array will look like ``[x,y,mode,radius]``. And if mode and radius are zeros, it becomes ``[x, y]``

* Point point = [0,0]
* Point from = [0,0]
* Point to = [0,0]
* float radius
* CurveMode mode = 0

### Enum Arrowhead — Defines the appearance of arrowheads.

* 0 none
* 1 arrow
* 2 arrowFilled
* 3 line
* 4 circle
* 5 circleFilled
* 6 square
* 7 squareFilled

### Enum BaselinePosition — Defines text position against the baseline.

* 0 normal
* 1 superscript
* -1 subscript

### Enum BlendMode — Defines the type of blend mode applied to a layer.

* 0 normal
* 1 darken
* 2 multiply
* 3 colorBurn
* 4 lighten
* 5 screen
* 6 colorDodge
* 7 overlay
* 8 softLight
* 9 hardLight
* 10 difference
* 11 exclusion
* 12 hue
* 13 saturation
* 14 color
* 15 luminosity
* 16 plusDarker
* 17 plusLighter

### Enum BlurType — Defines the blur type.

* 0 gaussian
* 3 background

### Enum BoolOp — Types of boolean operations used to combine shapes.

* -1 none
* 0 union
* 1 subtract
* 2 intersect
* 3 difference

### Enum CharacterCasing — Defines letter case.

* 0 normal
* 1 upperCase
* 2 lowerCase
* 3 titleCase

### Enum CurveMode — Defines the types of points on Bézier curves.

* 0 none
* 1 straight
* 2 mirrored
* 3 asymmetric
* 4 disconnected
* 4 onlyFrom
* 5 onlyTo

### Enum FillType — Defines the fill type.

* 0 color
* 1 gradient
* 4 pattern

### Enum GradientType — List of Gradient types.

* 0 linear
* 1 radial
* 2 angular

### Enum HorizontalAlignment — Defines how a set of layers is aligned horizontally.

* 0 left
* 1 center
* 2 right
* 3 distribute

### Enum LayoutHorizontalAlignment — Defines horizontal alignment settings in layout guide.

* 0 left
* 1 center
* 2 right
* 3 stretch

### Enum LayoutOrientation — Orientation of an auto layout.

* 0 horizontal
* 1 vertical

### Enum LayoutVerticalAlignment — Defines vertical alignment settings in layout guides.

* 0 top
* 1 middle
* 2 bottom
* 3 stretch

### Enum LineCap — Defines the shape of the end caps of open paths drawn with the Line, Arrow, or Pen/Pencil tools.

* 0 butt
* 1 round
* 2 square

### Enum LineJoin — Defines the appearance of the corners for arrows and paths with corners drawn with the Pen/Pencil tool.

* 0 miter
* 1 round
* 2 bevel

### Enum LinePosition — Defines the border position.

* 0 center
* 1 inside
* 2 outside

### Enum ListMarkerType — Defines the type of a text list.

* 0 none
* 1 bullet
* 2 numbered

### Enum MaskType — Type of a mask.

* 0 vector
* 1 alpha
* 2 luminance

### Enum PathFillType — Defines the filling options for overlapping paths.

* 0 winding
* 1 evenOdd

### Enum PatternFillType — Defines the image fill type.

* 0 tile
* 1 fill
* 2 stretch
* 3 fit
* 4 crop

### Enum ScaleType — Defines the scale type for exported objects.

* 0 scale
* 1 width
* 2 height

### Enum SizingMode — Defines the behavior of auto layout containers as their content is changed.

* 0 auto
* 1 fixed

### Enum TextBehavior — Defines textbox behavior options.

* 1 autoHeight
* 2 fixed
* 0 flexible

### Enum TextHorizontalAlignment — Defines how a text is aligned horizontally.

* 0 left
* 1 right
* 2 center
* 3 justify

### Enum TextVerticalAlignment — Defines how a text is aligned vertically.

* 0 top
* 1 middle
* 2 bottom

### Enum VerticalAlignment — Defines how a set of layers is aligned vertically.

* 0 top
* 1 center
* 2 bottom
* 3 distribute

